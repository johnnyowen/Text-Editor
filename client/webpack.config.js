const HtmlWebpackPlugin = require("html-webpack-plugin");
const WebpackPwaManifest = require("webpack-pwa-manifest");
const path = require("path");
const { InjectManifest } = require("workbox-webpack-plugin");

module.exports = () => {
  return {
    mode: "development",
    entry: {
      main: "./src/js/index.js",
      install: "./src/js/install.js",
    },
    output: {
      filename: "[name].bundle.js",
      path: path.resolve(__dirname, "dist"),
    },
    plugins: [
      new HtmlWebpackPlugin({
        // the path to the source HTML file you want to use as a template
        template: "./index.html",
        // sets the title of the HTML document that will be generated by the plugin
        title: "J.A.T.E",
      }),
      new HtmlWebpackPlugin({
        template: "./index.html",
        // only the assets associated with the "install" chunk will be included in the HTML file
        chunks: ["install"],
        // sets the filename for the generated HTML file with the name "install.html"
        filename: "install.html",
      }),
      new InjectManifest({
        // specifies the path to the source service worker file
        swSrc: "./src-sw.js",
        // defines the destination path and filename for the generated service worker file
        swDest: "src-sw.js",
      }),
      new WebpackPwaManifest({
        // not includinging fingerprints in the generated manifest and icon filenames
        fingerprints: false,
        //  the plugin will automatically inject the manifest link into the HTML
        inject: true,
        // setting the name, optional shortname, description, and background color for the PWA
        name: "J.A.T.E",
        short_name: "J.A.T.E",
        description: "A PWA text editor",
        background_color: "#00aaff",
        // sets the start URL for the PWA
        start_url: "/",
        // specifies the public path for the generated icons
        publicPath: "/",
        // specifies how to handle cross-origin requests
        crossorigin: "use-credentials",
        // a single icon is configured with its source, sizes, and destination
        icons: [
          {
            src: path.resolve("./src/images/logo.png"),
            sizes: [96, 128, 192, 256, 384, 512],
            destination: path.join("assets", "icons"),
          },
        ],
      }),
    ],

    module: {
      rules: [
        {
          // when a file matches the test pattern (in this case, files with a .css extension), the specified loaders are applied in reverse order
          test: /\.css$/i,
          // using the style-loader to inject CSS styles into the DOM and the css-loader to handle importing and processing CSS files
          use: ["style-loader", "css-loader"],
        },
        {
          // when a file matches the test pattern (in this case, files with a .js extension), the specified loaders are applied, excludes node_modules files
          test: /\.m?js$/,
          exclude: /node_modules/,
          use: {
            // using the babel-loader to transpile the JavaScript code using Babel
            loader: "babel-loader",
            options: {
              // using the @babel/preset-env preset for handling modern JavaScript features and the specified plugins for additional transformations
              presets: ["@babel/preset-env"],
              plugins: [
                "@babel/plugin-proposal-object-rest-spread",
                "@babel/transform-runtime",
              ],
            },
          },
        },
      ],
    },
  };
};
